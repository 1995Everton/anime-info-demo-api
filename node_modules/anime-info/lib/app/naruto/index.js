"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var elements_dom_1 = require("../utils/elements.dom");
var models_1 = require("./models");
var helper_1 = require("../utils/helper");
var enums_1 = require("../shared/enums");
var enums_2 = require("./enums");
var dom_1 = require("./utils/dom");
var Naruto = /** @class */ (function () {
    function Naruto(config) {
        var _this = this;
        if (config === void 0) { config = { lang: enums_1.Language.PT_BR }; }
        this._baseUrl = 'https://naruto.fandom.com/###wiki/';
        this._character = '';
        this._debut = function (document) {
            return {
                anime: elements_dom_1.$Query(document, _this._tags.anime),
                game: elements_dom_1.$Query(document, _this._tags.game),
                manga: elements_dom_1.$Query(document, _this._tags.manga),
                movie: elements_dom_1.$Query(document, _this._tags.movie),
                novel: elements_dom_1.$Query(document, _this._tags.novel),
                ova: elements_dom_1.$Query(document, _this._tags.ova),
            };
        };
        this._name = function (document) {
            return elements_dom_1.$Query(document, _this._tags.name);
        };
        this._description = function (document) {
            return elements_dom_1.$Query(document, _this._tags.description);
        };
        this._titles = function (document) {
            return elements_dom_1.getListElement(document, _this._tags.titles);
        };
        this._birthday = function (document) {
            return elements_dom_1.$Query(document, _this._tags.birthday);
        };
        this._status = function (document) {
            return elements_dom_1.$Query(document, _this._tags.status);
        };
        this._age = function (document) {
            return elements_dom_1.getAndRemoveTagBr(document, _this._tags.age);
        };
        this._height = function (document) {
            return elements_dom_1.getAndRemoveTagBr(document, _this._tags.height);
        };
        this._weight = function (document) {
            return elements_dom_1.getAndRemoveTagBr(document, _this._tags.weight);
        };
        this._classification = function (document) {
            return elements_dom_1.getListElement(document, _this._tags.classification);
        };
        this._team = function (document) {
            return elements_dom_1.getListElement(document, _this._tags.team);
        };
        this._partner = function (document) {
            return elements_dom_1.getListElement(document, _this._tags.partner);
        };
        this._occupation = function (document) {
            return elements_dom_1.getListElement(document, _this._tags.occupation);
        };
        this._ninja_rank = function (document) {
            return elements_dom_1.getListElement(document, _this._tags.ninja_rank);
        };
        this._ninja_registration = function (document) {
            return elements_dom_1.$Query(document, _this._tags.ninja_registration);
        };
        this._family = function (document) {
            return elements_dom_1.getListElement(document, _this._tags.family);
        };
        this._jutsu = function (document) { return __awaiter(_this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = this._baseUrl + "Jutsu_de_" + this._character;
                        return [4 /*yield*/, dom_1.getNameAndPhotoTable(document, this._tags.jutsu, this._lang, url)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        }); };
        this._nature_type = function (document) {
            return elements_dom_1.getNameAndImage(document, _this._tags.nature_type);
        };
        this._tools = function (document) { return __awaiter(_this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = this._baseUrl + "Equipamentos_de_" + this._character;
                        return [4 /*yield*/, dom_1.getNameAndPhotoTable(document, this._tags.tools, this._lang, url)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        }); };
        this._quotes = function (document) { return __awaiter(_this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = this._baseUrl + "Frases_de_" + this._character;
                        return [4 /*yield*/, dom_1.getQuotes(document, this._tags.quotes, this._lang, url)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        }); };
        this._sex = function (document) {
            return elements_dom_1.$Query(document, _this._tags.sex);
        };
        this._photo = function (document) {
            return elements_dom_1.getNameAndAllImageCharacter(document, _this._tags.photo);
        };
        this._voices = function (document) {
            var _a = _this._tags.voices, name = _a.name, country = _a.country;
            return dom_1.getVoices(document, country, name);
        };
        this._kekkei_genkai = function (document) {
            return elements_dom_1.getNameAndImage(document, _this._tags.kekkei_genkai);
        };
        this._affiliation = function (document) {
            return elements_dom_1.getNameAndImage(document, _this._tags.affiliation);
        };
        this._clan = function (document) {
            return elements_dom_1.getNameAndImage(document, _this._tags.clan);
        };
        this._lang = config.lang;
        this._tags = this._getTags(config.lang);
    }
    Naruto.prototype._getTags = function (lang) {
        switch (lang) {
            case enums_1.Language.PT_BR:
                this._baseUrl = this._baseUrl.replace('###', 'pt-br/');
                return {
                    name: enums_2.TagsPtBr.Name,
                    description: enums_2.TagsPtBr.Description,
                    photo: enums_2.TagsPtBr.Photo,
                    titles: enums_2.TagsPtBr.Titles,
                    birthday: enums_2.TagsPtBr.Birthday,
                    status: enums_2.TagsPtBr.Status,
                    age: enums_2.TagsPtBr.Age,
                    height: enums_2.TagsPtBr.Height,
                    weight: enums_2.TagsPtBr.Weight,
                    classification: enums_2.TagsPtBr.Classification,
                    team: enums_2.TagsPtBr.Team,
                    partner: enums_2.TagsPtBr.Partner,
                    occupation: enums_2.TagsPtBr.Occupation,
                    ninja_rank: enums_2.TagsPtBr.NinjaRank,
                    ninja_registration: enums_2.TagsPtBr.NinjaRegistration,
                    family: enums_2.TagsPtBr.Family,
                    jutsu: enums_2.TagsPtBr.Jutsu,
                    nature_type: enums_2.TagsPtBr.NatureType,
                    tools: enums_2.TagsPtBr.Tools,
                    quotes: enums_2.TagsPtBr.Quotes,
                    sex: enums_2.TagsPtBr.Sex,
                    kekkei_genkai: enums_2.TagsPtBr.KekkeiGenkai,
                    affiliation: enums_2.TagsPtBr.Affiliation,
                    clan: enums_2.TagsPtBr.Clan,
                    anime: enums_2.TagsPtBr.Anime,
                    game: enums_2.TagsPtBr.Game,
                    manga: enums_2.TagsPtBr.Manga,
                    movie: enums_2.TagsPtBr.Movie,
                    novel: enums_2.TagsPtBr.Novel,
                    ova: enums_2.TagsPtBr.Ova,
                    voices: {
                        name: enums_2.TagsPtBr.VoicesName,
                        country: enums_2.TagsPtBr.VoicesCountry,
                    },
                };
            case enums_1.Language.ES:
                this._baseUrl = this._baseUrl.replace('###', 'es/');
                return {
                    name: enums_2.TagsEs.Name,
                    description: enums_2.TagsEs.Description,
                    photo: enums_2.TagsEs.Photo,
                    titles: enums_2.TagsEs.Titles,
                    birthday: enums_2.TagsEs.Birthday,
                    status: enums_2.TagsEs.Status,
                    age: enums_2.TagsEs.Age,
                    sex: enums_2.TagsEs.Sex,
                    height: enums_2.TagsEs.Height,
                    weight: enums_2.TagsEs.Weight,
                    classification: enums_2.TagsEs.Classification,
                    team: enums_2.TagsEs.Team,
                    partner: enums_2.TagsEs.Partner,
                    occupation: enums_2.TagsEs.Occupation,
                    ninja_rank: enums_2.TagsEs.NinjaRank,
                    ninja_registration: enums_2.TagsEs.NinjaRegistration,
                    family: enums_2.TagsEs.Family,
                    jutsu: enums_2.TagsEs.Jutsu,
                    nature_type: enums_2.TagsEs.NatureType,
                    tools: enums_2.TagsEs.Tools,
                    quotes: enums_2.TagsEs.Quotes,
                    kekkei_genkai: enums_2.TagsEs.KekkeiGenkai,
                    affiliation: enums_2.TagsEs.Affiliation,
                    clan: enums_2.TagsEs.Clan,
                    anime: enums_2.TagsEs.Anime,
                    game: enums_2.TagsEs.Game,
                    manga: enums_2.TagsEs.Manga,
                    movie: enums_2.TagsEs.Movie,
                    novel: enums_2.TagsEs.Novel,
                    ova: enums_2.TagsEs.Ova,
                    voices: {
                        name: enums_2.TagsEs.VoicesName,
                        country: enums_2.TagsEs.VoicesCountry,
                    },
                };
            case enums_1.Language.EN:
            default:
                throw new Error('language not available');
        }
    };
    Naruto.prototype.getCharacter = function (name, option) {
        return __awaiter(this, void 0, void 0, function () {
            var document_1, options, keys, info, _i, keys_1, key, _a, _b, error_1;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _c.trys.push([0, 6, , 7]);
                        this._character = name;
                        return [4 /*yield*/, elements_dom_1.getDom(this._baseUrl + this._character)];
                    case 1:
                        document_1 = _c.sent();
                        options = Object.assign(models_1.defaultOption, option);
                        keys = Object.keys(options);
                        info = {};
                        _i = 0, keys_1 = keys;
                        _c.label = 2;
                    case 2:
                        if (!(_i < keys_1.length)) return [3 /*break*/, 5];
                        key = keys_1[_i];
                        if (!helper_1.getKeyValue(options, key)) return [3 /*break*/, 4];
                        _a = info;
                        _b = key;
                        return [4 /*yield*/, helper_1.getFunctionFactory(this, document_1, '_' + key)];
                    case 3:
                        _a[_b] = _c.sent();
                        _c.label = 4;
                    case 4:
                        _i++;
                        return [3 /*break*/, 2];
                    case 5: return [2 /*return*/, info];
                    case 6:
                        error_1 = _c.sent();
                        console.log(error_1);
                        throw new Error('The requested Character does not exist');
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    return Naruto;
}());
exports.Naruto = Naruto;
